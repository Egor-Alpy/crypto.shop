# IMPORT ----- IMPORT ----- IMPORT ----- IMPORT ----- IMPORT ----- IMPORT ----- IMPORT ----- IMPORT ----- IMPORT ----- I
import datetime

from aiogram.dispatcher import FSMContext
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from data_project.data_base import *

from bot_creation import *
from aiogram import types

from data_project.text import MSG

from foundation.keyboards import get_softs_inlinekeyboard
from state_groups import *

from web3 import Web3
from web3.types import HexStr

# –æ—Ç–º–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏
@dp.callback_query_handler(lambda call: call.data.startswith('cancel_purchase'),
                           state=PaymentStatesGroup.all_states + ClientStatesGroup.all_states + PartnerStatesGroup.all_states)
async def cancel_purchase(callback: types.CallbackQuery, state: FSMContext):
    await state.finish()
    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                        reply_markup=None)
    await bot.send_message(chat_id=callback.message.chat.id,
                           text="*–ü–æ–∫—É–ø–∫–∞ –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /menu, —á—Ç–æ–±—ã –≤—ã–∑–≤–∞—Ç—å –º–µ–Ω—é*",
                           parse_mode='markdown')
    await callback.answer()


# —Å–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Å–æ—Ñ—Ç–æ–≤
@dp.callback_query_handler(lambda call: call.data.startswith('SOFT'))
async def chosen_soft(callback: types.CallbackQuery):
    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ñ—Ç–∞ / –Ω–∞—á–∞–ª–æ –ø–æ–∫—É–ø–∫–∏
    b1 = InlineKeyboardButton('–ö—É–ø–∏—Ç—å', callback_data='buy_request')
    b2 = InlineKeyboardButton('üî∫ –ù–∞–∑–∞–¥', callback_data='back_to_soft_menu')
    soft_consideration_markup = InlineKeyboardMarkup()
    soft_consideration_markup.add(b1, b2)

    data_list = data_base.select_software_info(callback.data[4:])[0]
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text=f'<b><u>–ù–∞–∑–≤–∞–Ω–∏–µ</u>:</b> {data_list[0]}\n\n<b><u>–û–ø–∏—Å–∞–Ω–∏–µ</u>:</b> {data_list[1]}\n\n<b><u>–¶–µ–Ω–∞</u>:</b> {data_list[2]} USDT',
                                parse_mode='html', reply_markup=soft_consideration_markup)


# –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –º–µ–Ω—é —Å–æ—Ñ—Ç–æ–≤
@dp.callback_query_handler(lambda call: call.data.startswith('back_to_soft_menu'))
async def back_from_description_menu(callback: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text=MSG['RUS']['SOFT_MENU'],
                                parse_mode='markdown', reply_markup=get_softs_inlinekeyboard())


# –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∫—É–ø–∫—É
@dp.callback_query_handler(lambda call: call.data.startswith('buy_request'))
async def buy_callback(callback: types.CallbackQuery, state: FSMContext):
    await PaymentStatesGroup.promo.set()
    promocode_check_markup = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip_promo')
    b2 = InlineKeyboardButton('üî¥–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—Éüî¥', callback_data='cancel_purchase')
    promocode_check_markup.add(b1).add(b2)

    soft_name = callback.message.text.split('\n')[0][10::]
    soft_price = callback.message.text.split('\n')[-1].split()[1]

    async with state.proxy() as data:
        data['soft_name'] = soft_name
        data['soft_price'] = soft_price
        data['description_message_id'] = callback.message.message_id
    await bot.edit_message_reply_markup(message_id=callback.message.message_id, chat_id=callback.message.chat.id,
                                        reply_markup=None)
    await bot.send_message(chat_id=callback.message.chat.id,
                           text='–í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–º–æ–∫–æ–¥ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"',
                           reply_markup=promocode_check_markup)


# –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —à–∞–≥: –ø—Ä–æ–º–æ–∫–æ–¥
@dp.callback_query_handler(lambda call: call.data.startswith('skip_promo'), state=PaymentStatesGroup.promo)
async def skip_promo(callback: types.CallbackQuery, state: FSMContext):
    await PaymentStatesGroup.receipt.set()
    receipt_markup = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ', callback_data='go_to_purchase')
    b2 = InlineKeyboardButton('üî¥–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—Éüî¥', callback_data='cancel_purchase')
    receipt_markup.add(b1).add(b2)
    async with state.proxy() as data:
        data['soft_promo'] = '-'
        data['price_promo'] = str(float(data['soft_price']) - 0)
        data['promo_discount'] = 0
    name = data['soft_name']
    price_with_promo = float(data['soft_price']) - 0
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text=f"<b><u>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ñ—Ç–∞:</u> {name}</b>\n"
                                     f"<b><u>–¶–µ–Ω–∞ —Å–æ—Ñ—Ç–∞:</u> {price_with_promo} USDT</b>\n"
                                     f"<b><u>–°–∫–∏–¥–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞:</u> {0} USDT\n</b>"
                                     f"",
                                reply_markup=receipt_markup, parse_mode='html')


# –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(content_types=['text'], state=PaymentStatesGroup.promo)
async def add_promo(message: types.Message, state: FSMContext):
    valid_promos = data_base.select_promos()
    if message.text in valid_promos:
        promo_discount = data_base.select_promo_discount(message.text)
        await PaymentStatesGroup.receipt.set()
        async with state.proxy() as data:
            data['soft_promo'] = message.text
            data['price_promo'] = str(float(data['soft_price']) - promo_discount)
            data['promo_discount'] = promo_discount
        receipt_markup = InlineKeyboardMarkup()
        b1 = InlineKeyboardButton('–ü–µ—Ä–µ–π—Ç–∏ –∫ –ø–æ–∫—É–ø–∫–µ', callback_data='go_to_purchase')
        b2 = InlineKeyboardButton('üî¥–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—Éüî¥', callback_data='cancel_purchase')
        receipt_markup.add(b1).add(b2)
        await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id - 1,
                                            reply_markup=None)
        price_with_promo = float(data['soft_price']) - promo_discount
        await bot.send_message(chat_id=message.chat.id,
                               text=f"<b><u>–ù–∞–∑–≤–∞–Ω–∏–µ —Å–æ—Ñ—Ç–∞:</u> {data['soft_name']}</b>\n"
                                    f"<b><u>–¶–µ–Ω–∞ —Å–æ—Ñ—Ç–∞:</u> {price_with_promo} USDT</b>\n"
                                    f"<b><u>–°–∫–∏–¥–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞:</u> {promo_discount} USDT\n</b>"
                                    f"",
                               reply_markup=receipt_markup, parse_mode='html')
    else:
        promocode_check_markup = InlineKeyboardMarkup()
        b1 = InlineKeyboardButton('–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å', callback_data='skip_promo')
        b2 = InlineKeyboardButton('üî¥–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—Éüî¥', callback_data='cancel_purchase')
        promocode_check_markup.add(b1).add(b2)
        await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id - 1,
                                            reply_markup=None)
        await bot.send_message(chat_id=message.chat.id,
                               text='<b>‚ùóÔ∏è–ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–≤–µ—Å—Ç–∏ –¥—Ä—É–≥–æ–π –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å"‚ùóÔ∏è</b>',
                               parse_mode='html', reply_markup=promocode_check_markup)


# –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
@dp.callback_query_handler(state=PaymentStatesGroup.receipt)
async def skip_promo(callback: types.CallbackQuery, state: FSMContext):
    await PaymentStatesGroup.transaction.set()
    transaction_markup = InlineKeyboardMarkup()
    b1 = InlineKeyboardButton('üî¥–û—Ç–º–µ–Ω–∏—Ç—å –ø–æ–∫—É–ø–∫—Éüî¥', callback_data='cancel_purchase')
    transaction_markup.add(b1)
    async with state.proxy() as data:
        pass
    price_with_promo = float(data['soft_price']) - data['promo_discount']
    await bot.edit_message_text(chat_id=callback.message.chat.id, message_id=callback.message.message_id,
                                text=f"–û—Ç–ø—Ä–∞–≤—å—Ç–µ {price_with_promo} USDT –ø–æ –∞–¥—Ä–µ—Å—É: XXXXXXXXXXXXXXXXXXXXX. –ü–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ "
                                     f"—Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ö—ç—à–æ–º —Ç—Ä–∞–Ω–∑–∞–∫–∑—Ü–∏–∏ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
                                reply_markup=transaction_markup)


# —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞
@dp.message_handler(state=PaymentStatesGroup.transaction)
async def transaction_check(message: types.Message, state: FSMContext):
    flag = False

    async with state.proxy() as data:
        pass

    chat_id = message.chat.id

    tx_hash = HexStr(message.text)  # '0xd3a08bbe68b8949ea43a76b5720914dcdaebc2b47b69d006af976aa84d5c9752'
    con_web3 = Web3(provider=Web3.HTTPProvider(endpoint_uri='https://rpc.ankr.com/eth'))

    USDT_CONTRACT_ADRESS = '0xdAC17F958D2ee523a2206206994597C13D831ec7'
    RECEIVER = '' # const

    tx_data = con_web3.eth.wait_for_transaction_receipt(transaction_hash=tx_hash, timeout=1000)

    tx_exists = tx_data['status']
    tx_contract = tx_data['to']  # –∞–¥—Ä–µ—Å –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞\–ø–æ–ª—É—á–∞—Ç–µ–ª—è?
    tx_receiver = tx_data['logs']['????']  # –∫–∞–∫ –≤—ã—Ç–∞—â–∏—Ç—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è
    tx_coin_qty = tx_data['logs']['?????']  # –∫–∞–∫ –≤—ã—Ç–∞—â–∏—Ç—å –∫–æ–ª-–≤–æ –º–æ–Ω–µ—Ç

    if tx_contract != USDT_CONTRACT_ADRESS:
        bot.send_message(chat_id=chat_id, text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –∞–¥—Ä–µ—Å —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞')

    elif tx_receiver != RECEIVER:
        bot.send_message(chat_id=chat_id, text='–ù–µ–≤–µ—Ä–Ω–æ —É–∫–∞–∑–∞–Ω –∞–¥—Ä–µ—Å –ø–æ–ª—É—á–∞—Ç–µ–ª—è')

    elif tx_coin_qty < data['price_promo']:
        bot.send_message(chat_id=chat_id, text='–í—ã –ø–µ—Ä–µ–≤–µ–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ–µ –∫–æ–ª-–≤–æ —Å—Ä–µ–¥—Å—Ç–≤')

    elif tx_exists != 1:
        bot.send_message(chat_id=chat_id, text='–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏')

    elif tx_hash in data_base:
        bot.send_message(chat_id=chat_id, text='–û—à–∏–±–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏, —Ö—ç—à-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö')

    else:
        flag = True

    if flag:
        await PaymentStatesGroup.github_request.set()
        async with state.proxy() as data:
            data['transaction_hash'] = message.text
            data['status'] = tx_exists
        await bot.edit_message_reply_markup(chat_id=message.chat.id, message_id=message.message_id - 1,
                                            reply_markup=None)
        await bot.send_message(chat_id=message.chat.id,
                               text="*–¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –±—ã–ª–∞ —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞, –ø—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ–π –≥–∏—Ç—Ö–∞–± –¥–ª—è –≤—ã–¥–∞—á–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–æ—Ñ—Ç—É.*",
                               parse_mode='markdown')
        promo = data['soft_promo']
        if data['soft_promo'] != '-':
            promo_quantity_left = data_base.select_promo_quantity(promo)
            if promo_quantity_left <= 1:
                data_base.del_promo(promo)
            else:
                data_base.edit_promo_quantity_minus_one(promo, promo_quantity_left)

    else:
        pass


# –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–∫—É–ø–∫–∏
@dp.message_handler(state=PaymentStatesGroup.github_request)
async def transaction_check(message: types.Message, state: FSMContext):
    if True:
        async with state.proxy() as data:
            data['github'] = message.text
        await bot.send_message(chat_id=message.chat.id,
                               text="*–î–æ—Å—Ç—É–ø –∫ —Å–æ—Ñ—Ç—É –±—É–¥–µ—Ç –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è, —Å–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
                                    "\n"
                                    "–ß—Ç–æ–±—ã –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥—Ä—É–≥–∏–µ —Å–æ—Ñ—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ /menu.*",
                               parse_mode='markdown')

        refer_code = data_base.select_refer_code(user_id=message.from_user.id)[0]

        time = datetime.datetime.now()
        github = data['github']
        soft_name = data['soft_name']
        soft_price = data['soft_price']
        promo = data['soft_promo']
        discount = data['promo_discount']
        purchased = data['price_promo']
        transaction_hash = data['transaction_hash']
        username = message.from_user.username
        user_id = message.from_user.id
        status = '' # !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!1111

        data_base.add_purchase(user_id=user_id, username=username,
                               user_github=github, soft_name=soft_name, soft_price=soft_price,
                               promo=promo, discount=discount,
                               purchased=purchased, transaction_hash=transaction_hash, refer_code=refer_code,
                               status=status, data_time=time)

        await bot.send_message(chat_id='868320310', text=f"*üü¢–ë–´–õ–ê –°–û–í–ï–†–®–ï–ù–ê –ü–û–ö–£–ü–ö–êüü¢\n–°–æ—Ñ—Ç: {data['soft_name']}\n"
                                                         f"–ò—Ç–æ–≥–æ–≤–∞—è —Ü–µ–Ω–∞: {purchased} USDT\n"
                                                         f"–ü—Ä–æ–º–æ: {promo}\n"
                                                         f"–°–∫–∏–¥–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞: {discount} USDT\n"
                                                         f"–†–µ—Ñ–µ—Ä–∞–ª id: {refer_code}\n"
                                                         f"USERNAME –ø–æ–∫—É–ø–∞—Ç–µ–ª—è: {username}\n"
                                                         f"–•—ç—à-—Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏: {transaction_hash}\n"
                                                         f"Github: {data['github']}\n*", parse_mode='markdown')

        await state.finish()
    else:
        pass
